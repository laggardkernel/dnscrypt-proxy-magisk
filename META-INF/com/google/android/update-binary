#!/sbin/sh

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

# This path should work in any cases
TMPDIR=/dev/tmp
MOUNTPATH=/magisk
IMG=/data/magisk.img
if $BOOTMODE; then
  MOUNTPATH=/dev/magisk_merge
  IMG=/data/magisk_merge.img
fi
INSTALLER=$TMPDIR/install
MAGISKBIN=/data/magisk

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

# echo before loading util_functions
ui_print() { echo "$1"; }

##########################################################################################
# Env
##########################################################################################

OUTFD=$2
ZIP=$3

ui_print "- Mounting /system, /vendor, /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

# Utility functions must exist
[ -f $MAGISKBIN/util_functions.sh ] || require_new_magisk
# Load utility fuctions
. $MAGISKBIN/util_functions.sh
get_outfd # I don't know what this does

if $BOOTMODE && ! is_mounted /magisk; then
  ui_print "! Magisk is not activated!... abort"
  exit 1
fi

if [ ! -f '/system/build.prop' ]; then
  ui_print "! Failed: /system could not be mounted!"
  exit 1
fi

$BOOTMODE && boot_actions || recovery_actions


##########################################################################################
# Functions
##########################################################################################


require_new_magisk() {
  ui_print "*******************************"
  ui_print " Please install Magisk v15.0+! "
  ui_print "*******************************"
  exit 1
}

ui_print() {
  if $BOOTMODE; then
    echo "$1"
  else
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

grep_prop() {
  REGEX="s/^$1=//p"
  shift
  FILES=$@
  if [ -z "$FILES" ]; then
    FILES='/system/build.prop'
  fi
  cat $FILES 2>/dev/null | sed -n "$REGEX" | head -n 1
}

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, >/dev/null
  else
    cat /proc/mounts | grep $1 >/dev/null
  fi
  return $?
}

mount_image() {
  if [ ! -d "$2" ]; then
    mount -o rw,remount rootfs /
    mkdir -p $2 2>/dev/null
    ($BOOTMODE) && mount -o ro,remount rootfs /
    [ ! -d "$2" ] && return 1
  fi
  if (! is_mounted $2); then
    LOOPDEVICE=
    for LOOP in 0 1 2 3 4 5 6 7; do
      if (! is_mounted $2); then
        LOOPDEVICE=/dev/block/loop$LOOP
        if [ ! -f "$LOOPDEVICE" ]; then
          mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
        fi
        losetup $LOOPDEVICE $1
        if [ "$?" -eq "0" ]; then
          mount -t ext4 -o loop $LOOPDEVICE $2
          if (! is_mounted $2); then
            /system/bin/toolbox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
          if (! is_mounted $2); then
            /system/bin/toybox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
        fi
        if (is_mounted $2); then
          ui_print "- Mounting $1 to $2"
          break;
        fi
      fi
    done
  fi
}

set_perm() {
  chown $2:$3 $1 || exit 1
  chmod $4 $1 || exit 1
  if [ ! -z "$5" ]; then
    chcon $5 $1 2>/dev/null
  else
    chcon 'u:object_r:system_file:s0' $1 2>/dev/null
  fi
}

set_perm_recursive() {
  find $1 -type d 2>/dev/null | while read dir; do
    set_perm $dir $2 $3 $4 $6
  done
  find $1 -type f 2>/dev/null | while read file; do
    set_perm $file $2 $3 $5 $6
  done
}

mktouch() {
  mkdir -p ${1%/*}
  if [ -z "$2" ]; then
    touch $1
  else
    echo $2 > $1
  fi
  chmod 644 $1
}

request_size_check() {
  reqSizeM=`unzip -l "$1" 2>/dev/null | tail -n 1 | awk '{ print $1 }'`
  reqSizeM=$((reqSizeM / 1048576 + 1))
}

image_size_check() {
  e2fsck -yf $1
  curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=`echo "$curBlocks" | cut -d/ -f1`
  curSizeM=`echo "$curBlocks" | cut -d/ -f1`
  curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
  curUsedM=$((curUsedM * 4 / 1024 + 1))
  curSizeM=$((curSizeM * 4 / 1024))
}

# custom functions

# Unmount and clean the unziped files before exit
# Usage: safe_exit "1" "! Operation failed"
safe_exit() {
  rm -rf $MODPATH
  umount $MOUNTPATH
  losetup -d $LOOPDEVICE
  rmdir $MOUNTPATH
  if ! $BOOTMODE; then
    umount /system
    umount /vendor 2>/dev/null
  fi
  rm -rf $INSTALLER
  if [ ! -z "$2"]; then
    ui_print "$2"
  fi
  exit "$1"
}

set_separate_perm_recursive() {
  find $1 -type d 2>/dev/null | while read dir; do
    set_perm $dir $2 $3 $6 $8
  done
  find $1 -type f 2>/dev/null | while read file; do
    set_perm $file $4 $5 $7 $9
  done
}

##########################################################################################
# Flashable update-binary preparation
##########################################################################################


mkdir -p $TMPDIR 2>/dev/null
cd $TMPDIR
unzip -o "$ZIP" module.prop config.sh 'common/*'

if [ ! -f "config.sh" ]; then
  ui_print "! Failed: Unable to extract zip file!"
  exit 1
fi

ui_print "- Loading new config"
. ./config.sh

# Check the min magisk version
MIN_VER=`grep_prop template ./module.prop`
[ $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID
ui_print "- Magisk version passed"

# Print mod name
print_modname
# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

INSTALLER=$TMPDIR/$MODID
MODPATH=$MOUNTPATH/$MODID

# FILE LOCATIONS

if [ -d "/system/system" ]; then
  SYS=/system/system
else
  SYS=/system
fi

if [ ! -d "$SYS/vendor" ] || [ -L "$SYS/vendor" ]; then
  VEN=/vendor
elif [ -d "$SYS/vendor" ] || [ -L "/vendor" ]; then
  VEN=$SYS/vendor
fi

if [ -e "$VEN/build.prop" ] && [ ! -e "$SYS/build.prop" ]; then
  BUILDPROP=$VEN/build.prop
elif [ -e "$SYS/build.prop" ] && [ ! -e "$VEN/build.prop" ]; then
  BUILDPROP=$SYS/build.prop
elif [ -e "$SYS/build.prop" ] && [ -e "$VEN/build.prop" ]; then
  if [ $(wc -c < "$SYS/build.prop") -ge $(wc -c < "$VEN/build.prop") ]; then
    BUILDPROP=$SYS/build.prop
  else
    BUILDPROP=$VEN/build.prop
  fi
fi

if [ -d "/sdcard0" ]; then
  SDCARD=/sdcard0
elif [ -d "/sdcard/0" ]; then
  SDCARD=/sdcard/0
else
  SDCARD=/sdcard
fi

MIRRDIR=""
if $BOOTMODE; then
  MIRRDIR="/dev/magisk/mirror"
fi

MIRRSYS="$MIRRDIR$SYS"

# Clean temporary files
rm -rf $INSTALLER 2>/dev/null
# unzip files into temperary folder $INSTALLER
mkdir -p $INSTALLER
cd $INSTALLER
# unzip -o "$ZIP" common/* module.prop
unzip -o "$ZIP"

##########################################################################################
# Main
##########################################################################################

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods
ui_print "- Checking compatibility"
if [ "$API" -lt "21" ]; then
  ui_print "! Magisk ONLY supports Lollipop 5.0+ (SDK 21+)"
  exit 1
else
  ui_print "- Magisk supports SDK $API. Compatible."
fi

api_level_arch_detect
#API=`grep_prop ro.build.version.sdk`
ABI=`grep_prop ro.product.cpu.abi | cut -c-3`
ABI2=`grep_prop ro.product.cpu.abi2 | cut -c-3`
ABILONG=`grep_prop ro.product.cpu.abi`

#ARCH=arm
IS64BIT=false
#if [ "$ABI" = "x86" ]; then ARCH=x86; fi;
#if [ "$ABI2" = "x86" ]; then ARCH=x86; fi;
if [ "$ABILONG" = "arm64-v8a" ]; then IS64BIT=true; fi;
if [ "$ABILONG" = "x86_64" ]; then IS64BIT=true; fi;

PRODUCT=$(grep_prop ro.build.product $BUILDPROP)
if [ -z "$PRODUCT" ]; then
  PRODUCT=$(grep_prop ro.product.device $BUILDPROP)
fi
if [ -z "$PRODUCT" ]; then
  PRODUCT=$(grep_prop ro.product.name $BUILDPROP)
fi

BRAND=$(grep_prop ro.product.brand $BUILDPROP)

MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID

if is_mounted /data; then
  if [ ! -f "/data/magisk.img" ]; then
    ui_print "! Magisk is not installed!"
    ui_print "! Magisk is required for this mod!"
    exit 1
  fi
else
  ui_print " "
  ui_print "***********************************"
  ui_print "*      !! Data unavailible !!     *"
  ui_print "* Magisk detection is impossible  *"
  ui_print "* Installation will still proceed *"
  ui_print "*  But please make sure you have  *"
  ui_print "*        Magisk installed!!       *"
  ui_print "***********************************"
  ui_print " "
fi

request_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "- Found $IMG"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    newSizeM=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "- Resizing $IMG to ${newSizeM}M"
    $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
  fi
else
  newSizeM=$((reqSizeM / 32 * 32 + 64));
  ui_print "- Creating $IMG with size ${newSizeM}M"
  $MAGISKBIN/magisk --createimg $IMG $newSizeM
fi

# This function will mount $IMG to $MOUNTPATH, and resize the image based on $reqSizeM
mount_magisk_img
#mount_image $IMG $MOUNTPATH
#if ! is_mounted $MOUNTPATH; then
#  ui_print "! $IMG mount failed... abort"
#  exit 1
#fi

# #TODO: If we're upgrading in Magisk Manager, overwrite.
UPGRADE=false
$BOOTMODE && [ -d "/magisk/$MODID" ] && UPGRADE=true

# Flashing zip twice for uninstallation, ONLY available in recovery
if ! $BOOTMODE && [ -d "$MODPATH" ]; then
  ui_print "- Removing module $MODPATH"
  rm -rf $MODPATH
  # rm /magisk/.core/post-fs-data.d/$CHECKERSCRIPT
  # ui_print "  Removing apps in /data"
  # rm -rf /data/app/${PACKAGENAME1}-*
  # rm -rf /data/app/${PACKAGENAME2}-*
  safe_exit 0 "- Done"
else
  ui_print "- Installing module $MODPATH"
fi


# Create mod paths
# ui_print "- Cleaning conflicting apps in /data"
# rm -rf /data/app/com.atmos-*
# rm -rf /data/data/com.atmos
# rm -rf /data/app/com.atmos.daxappUI-*
# rm -rf /data/data/com.atmos.daxappUI
rm -rf $MODPATH 2>/dev/null

# Create mod paths
# empty folders will be deleted by magisk_mount.sh during boot
# mkdir -p $MODPATH
mkdir -p $MODPATH$SYS

# Cleaning conflicts in /magisk
if [ -n "$TESTREMOVAL" ]; then
  ui_print "- Cleaning conflicts in /magisk"
  for TARGET in $TESTREMOVAL; do
    # for FILETYPE in d f l; do
    for FILETYPE in d; do
      RESULT=$(find /magisk/* -name "${TARGET##/*/}" -type "$FILETYPE" 2>/dev/null | grep -v $MODID | grep "$TARGET")
      if [ ! -z "$RESULT" ]; then
        for ITEM in $RESULT; do
          ui_print "  $ITEM"
          rm -rf "$ITEM"
        done
      fi
    done
  done
fi

# Handle removal files after test
if [ -n "$TESTREMOVAL" ]; then
  ui_print "- Removing existing files systemlessly"
  for TARGET in $TESTREMOVAL; do
    if [ -d "$MIRRDIR$TARGET" ]; then
      ui_print "  $TARGET"
      mktouch "$MODPATH$TARGET/.replace"
    elif [ -f "$MIRRDIR$TARGET" ]; then
      ui_print "  $TARGET"
      mktouch "$MODPATH$TARGET"
    elif [ -L "$MIRRDIR$TARGET" ]; then
      ui_print "  $TARGET"
      mktouch "$MODPATH$TARGET"
    else
      :
    fi
  done
fi

# Copy files
ui_print "- Copying files"
# unzip -o "$ZIP" system/* -d $MODPATH
cp -af $INSTALLER/system/* $MODPATH$SYS
# cp -af $INSTALLER/vendor/* $MODPATH$SYS/vendor 2>/dev/null
if ! $IS64BIT; then
  rm -rf $MODPATH$SYS/lib64 2>/dev/null
  rm -rf $MODPATH$SYS/vendor/lib64 2>/dev/null
fi

cp -af $INSTALLER/$ARCH/* $MODPATH$SYS

if [ -d "$INSTALLER/script" ]; then
  cp -af $INSTALLER/script $MODPATH
fi

# build property database patch for MOD by resetprop, through a
# property file called "custom_build.prop" or any other name, default name system.prop
if $PROPFILE; then
  cp -af "$INSTALLER/common/$buildname" "$MODPATH/$buildname"
fi

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

# Auto Mount
$AUTOMOUNT && touch $MODPATH/auto_mount

# Module info
cp -af $INSTALLER/module.prop $MODPATH/module.prop
if $BOOTMODE; then
  # Update info for Magisk Manager
  mktouch /magisk/$MODID/update
  cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
fi

# post-fs-data mode scripts
if $POSTFSDATA; then
  cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh
fi

# service mode scripts
if $LATESTARTSERVICE; then
  cp -af $INSTALLER/common/service.sh $MODPATH/service.sh
fi

ui_print "- Setting permissions"
set_permissions

$MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP
rmdir $MOUNTPATH

# Shrink the image if possible
image_size_check $IMG
newSizeM=$((curUsedM / 32 * 32 + 64))
if [ $curSizeM -gt $newSizeM ]; then
  ui_print "- Shrinking $IMG to ${newSizeM}M"
  $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
fi

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

exit 0
